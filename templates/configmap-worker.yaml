{{- if gt (int .Values.server.workers) 0 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "presto.worker" . }}
  labels:
    app: presto
    chart: {{ template "presto.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: presto-worker
data:
  node.properties: |
    node.environment={{ .Values.server.node.environment }}
    node.data-dir={{ .Values.server.node.dataDir }}

  jvm.config: |
    -server
    -Xmx{{ .Values.server.jvm.maxHeapSize }}
    -XX:+{{ .Values.server.jvm.gcMethod.type }}
    -XX:G1HeapRegionSize={{ .Values.server.jvm.gcMethod.g1.heapRegionSize }}
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -XX:ReservedCodeCacheSize={{ .Values.server.jvm.reservedCache }}
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize={{ .Values.server.jvm.maxCachedBufferSize }}

  config.properties: |
    coordinator=false
    http-server.http.port={{ .Values.server.config.http.port }}
    exchange.client-threads=110
    exchange.http-client.max-connections-per-server=250
    query.max-memory={{ .Values.server.config.query.maxMemory }}
    query.max-memory-per-node={{ .Values.server.config.query.maxMemoryPerNode }}
    discovery.uri=http://{{ template "presto.fullname" . }}:{{ .Values.server.config.http.port }}

  log.properties: |
    io.prestosql={{ .Values.server.log.presto.level }}

  docker-presto.sh: |
    #!/bin/bash 
    cp {{ .Values.server.config.path }}/*.properties $PRESTO_CONF_DIR
    cp {{ .Values.server.config.path }}/*.config $PRESTO_CONF_DIR
    launcher run

  health_check.sh: |
    #!/bin/bash 
    curl --silent {{ template "presto.fullname" . }}:{{ .Values.server.config.http.port }}/v1/node | tr "," "\n" | grep -q $(hostname -i)

---
{{- end }}
